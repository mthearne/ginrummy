name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Lint and Type Check
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Lint
      run: pnpm lint
    
    - name: Type check
      run: pnpm type-check

  # Job 2: Unit Tests (Game Engine & Components)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run game engine tests
      run: pnpm test packages/common/tests/
      env:
        NODE_ENV: test

    - name: Run frontend component tests  
      run: pnpm test src/components/ src/pages/ src/store/
      env:
        NODE_ENV: test

  # Job 3: Integration Tests with Database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: ginrummy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
    
    - name: Run database migrations
      run: pnpm prisma migrate deploy
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
    
    - name: Run integration tests
      run: pnpm test tests/integration/
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

  # Job 4: Social Features Tests
  social-features-tests:
    name: Social Features Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: ginrummy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
    
    - name: Run database migrations
      run: pnpm prisma migrate deploy
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
        
    - name: Start test server
      run: pnpm dev &
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
        PORT: 3003

    - name: Wait for server
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3003/api/health; then
            echo "‚úÖ Server ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
        
    - name: Run social features tests
      run: pnpm test tests/social-features/
      env:
        NODE_ENV: test
        API_BASE_URL: http://localhost:3003

  # Job 5: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: ginrummy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
    
    - name: Run database migrations
      run: pnpm prisma migrate deploy
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
        
    - name: Start test server
      run: pnpm dev &
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/ginrummy_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
        PORT: 3003

    - name: Wait for server
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:3003/api/health; then
            echo "üîí Security testing server ready"
            break
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
        
    - name: Run comprehensive security tests
      run: pnpm test tests/security/
      env:
        NODE_ENV: test
        API_BASE_URL: http://localhost:3003

  # Job 6: Build Test
  build-test:
    name: Build Test  
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm db:generate
      env:
        DATABASE_URL: postgresql://user:pass@localhost:5432/dummy
    
    - name: Build application
      run: pnpm build
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://user:pass@localhost:5432/dummy
        JWT_SECRET: dummy-secret-for-build
        JWT_REFRESH_SECRET: dummy-refresh-secret-for-build

    - name: Verify build output
      run: |
        if [ -d ".next" ]; then
          echo "‚úÖ Next.js build successful"
          ls -la .next/
        else
          echo "‚ùå Build failed - no .next directory"
          exit 1
        fi

  # Job 7: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      continue-on-error: true
      
    - name: Check for high severity vulnerabilities
      run: pnpm audit --audit-level high

  # Job 8: Final Status
  all-tests-passed:
    name: All Tests Passed ‚úÖ
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, integration-tests, social-features-tests, security-tests, build-test, security-audit]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint-and-type-check.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.social-features-tests.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" && \
              "${{ needs.build-test.result }}" == "success" && \
              "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "üéâ ALL TESTS PASSED SUCCESSFULLY!"
          echo "‚úÖ Lint & Type Check: PASSED"
          echo "‚úÖ Unit Tests: PASSED" 
          echo "‚úÖ Integration Tests: PASSED"
          echo "‚úÖ Social Features Tests: PASSED"
          echo "‚úÖ Security Tests: PASSED"
          echo "‚úÖ Build Test: PASSED"
          echo "‚úÖ Security Audit: PASSED"
          echo ""
          echo "üöÄ Ready for deployment!"
        else
          echo "‚ùå Some tests failed:"
          echo "Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Social Features Tests: ${{ needs.social-features-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          exit 1
        fi

